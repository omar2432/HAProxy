global
    log stdout format raw local0 debug  # Logs to container's stdout at debug level (can be adjusted to 'info' or other levels)

defaults
    log global                    # Inherit global logging configuration
    option httplog                # Enable detailed HTTP logging (includes method, URL, and status code)
    option dontlognull            # Do not log connections that have no data (e.g., closed immediately)

# Section for HAProxy statistics page configuration
listen stats
    bind *:9000                    # Bind the stats page to port 9000
    mode http                      # Operate in HTTP mode
    stats enable                   # Enable the statistics page
    stats uri /stats               # The URI for accessing the stats page (e.g., http://<haproxy-server>:9000/stats)
    stats refresh 10s              # Refresh stats every 10 seconds
    stats auth admin:password      # Basic authentication for the stats page, replace 'admin' and 'password' with actual credentials
    #stats admin if LOCALHOST     # Uncomment this if you want stats accessible only from localhost
    timeout client 60s             # Timeout for client connections (max wait time for client response)
    timeout connect 10s            # Timeout for connecting to the backend server
    timeout server 10s             # Timeout for server responses

# Frontend definition that listens on HTTP port 80
frontend http80
    bind *:80                      # Bind frontend to port 80 for incoming HTTP traffic
    timeout client 60s             # Timeout for client connections
    mode http                      # Operate in HTTP mode

    # Define Access Control Lists (ACLs) to match specific paths and Host headers
    acl is_serviceA hdr(host) -i xyz.com
    acl serviceA_path path_beg /api/serviceA  # Match requests starting with /api/serviceA
    acl is_serviceB hdr(host) -i abc.com
    acl serviceB_path path_beg /api/serviceB  # Match requests starting with /api/serviceB

    # Basic authentication for serviceB_path
    http-request auth realm BasicAuth if serviceB_path !{ http_auth(auth_users) }

    # Route traffic based on the ACLs defined above
#    use_backend serviceAServers if serviceA_path  # If path matches serviceA, use serviceAServers backend
#    use_backend serviceBServers if serviceB_path  # If path matches serviceB, use serviceBServers backend
    use_backend serviceAServers if is_serviceA serviceA_path
    use_backend serviceBServers if is_serviceB serviceB_path

    # Default backend for all unmatched requests
    default_backend defaultBackend

# Backend for serviceA
backend serviceAServers
    timeout connect 10s            # Timeout for connecting to servers in this backend
    timeout server 10s             # Timeout for server responses
    balance roundrobin            # Use round-robin load balancing (even distribution of requests)
    mode http                      # Operate in HTTP mode
    option httpchk GET /health     # Perform health check using GET request to /health endpoint
    option redispatch              # Allow redirecting requests to another server if the selected server fails
    retries 2                      # Retry up to 2 times if the selected server fails

    # Modify the URL path for requests sent to the backend (removes '/api' from the path)
    http-request set-path %[path,regsub(^/api/serviceA/,/serviceA/)]

    # Define backend servers with health checks
    # inter 3s: Perform health checks every 3 seconds
    # fall 3: Mark the server as unhealthy after 3 consecutive failures
    # rise 2: Mark the server as healthy after 2 consecutive successes

    server serviceA1 servicea1:8081 check inter 3s fall 3 rise 2
    server serviceA2 servicea2:8083 check
#    server serviceA host.docker.internal:8082

# Backend for serviceB
backend serviceBServers
    timeout connect 5s            # Timeout for connecting to servers in this backend
    timeout server 5s             # Timeout for server responses
    balance roundrobin            # Use round-robin load balancing
    mode http                      # Operate in HTTP mode
    option httpchk GET /health     # Health check on /health endpoint
    option redispatch              # Allow redirection on failure
    retries 2                      # Retry up to 2 times if the selected server fails

    # Modify the URL path for requests sent to the backend (removes '/api' from the path)
    http-request set-path %[path,regsub(^/api/serviceB/,/serviceB/)]

    # Define backend servers with health checks
    server serviceB1 serviceb1:8082 check  # Server with health check
    server serviceB2 serviceb2:8084 check  # Another server with health check
#    server serviceB host.docker.internal:8083

# Default backend to handle unmatched requests
backend defaultBackend
    timeout connect 10s            # Timeout for connecting to default backend servers
    timeout server 10s             # Timeout for server responses in default backend
    mode http                      # Operate in HTTP mode

# Userlist for authentication
userlist auth_users
    user omar insecure-password pass123                            #pass123
#    user admin password $apr1$3g.f7gFD$51yIWuOGxQP.L/OkgKzFH/       #pass123
